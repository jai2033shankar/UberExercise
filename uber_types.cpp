/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "uber_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Uber {


Point::~Point() throw() {
}


void Point::__set_latitude(const double val) {
  this->latitude = val;
}

void Point::__set_longitude(const double val) {
  this->longitude = val;
}

const char* Point::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t Point::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other0) {
  latitude = other0.latitude;
  longitude = other0.longitude;
  __isset = other0.__isset;
}
Point& Point::operator=(const Point& other1) {
  latitude = other1.latitude;
  longitude = other1.longitude;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Point& obj) {
  using apache::thrift::to_string;
  out << "Point(";
  out << "latitude=" << to_string(obj.latitude);
  out << ", " << "longitude=" << to_string(obj.longitude);
  out << ")";
  return out;
}


TripPoint::~TripPoint() throw() {
}


void TripPoint::__set_trip_id(const int32_t val) {
  this->trip_id = val;
}

void TripPoint::__set_point(const Point& val) {
  this->point = val;
}

const char* TripPoint::ascii_fingerprint = "E25EF828A39BA6FAA7D1E497A45B056E";
const uint8_t TripPoint::binary_fingerprint[16] = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

uint32_t TripPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trip_id);
          this->__isset.trip_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TripPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TripPoint");

  xfer += oprot->writeFieldBegin("trip_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->trip_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TripPoint &a, TripPoint &b) {
  using ::std::swap;
  swap(a.trip_id, b.trip_id);
  swap(a.point, b.point);
  swap(a.__isset, b.__isset);
}

TripPoint::TripPoint(const TripPoint& other2) {
  trip_id = other2.trip_id;
  point = other2.point;
  __isset = other2.__isset;
}
TripPoint& TripPoint::operator=(const TripPoint& other3) {
  trip_id = other3.trip_id;
  point = other3.point;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TripPoint& obj) {
  using apache::thrift::to_string;
  out << "TripPoint(";
  out << "trip_id=" << to_string(obj.trip_id);
  out << ", " << "point=" << to_string(obj.point);
  out << ")";
  return out;
}


TripPointAmount::~TripPointAmount() throw() {
}


void TripPointAmount::__set_trip_id(const int32_t val) {
  this->trip_id = val;
}

void TripPointAmount::__set_point(const Point& val) {
  this->point = val;
}

void TripPointAmount::__set_dollar_amount(const double val) {
  this->dollar_amount = val;
}

const char* TripPointAmount::ascii_fingerprint = "0D30CA2C0277E811115FBB5017B9FA7A";
const uint8_t TripPointAmount::binary_fingerprint[16] = {0x0D,0x30,0xCA,0x2C,0x02,0x77,0xE8,0x11,0x11,0x5F,0xBB,0x50,0x17,0xB9,0xFA,0x7A};

uint32_t TripPointAmount::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trip_id);
          this->__isset.trip_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dollar_amount);
          this->__isset.dollar_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TripPointAmount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TripPointAmount");

  xfer += oprot->writeFieldBegin("trip_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->trip_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dollar_amount", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->dollar_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TripPointAmount &a, TripPointAmount &b) {
  using ::std::swap;
  swap(a.trip_id, b.trip_id);
  swap(a.point, b.point);
  swap(a.dollar_amount, b.dollar_amount);
  swap(a.__isset, b.__isset);
}

TripPointAmount::TripPointAmount(const TripPointAmount& other4) {
  trip_id = other4.trip_id;
  point = other4.point;
  dollar_amount = other4.dollar_amount;
  __isset = other4.__isset;
}
TripPointAmount& TripPointAmount::operator=(const TripPointAmount& other5) {
  trip_id = other5.trip_id;
  point = other5.point;
  dollar_amount = other5.dollar_amount;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TripPointAmount& obj) {
  using apache::thrift::to_string;
  out << "TripPointAmount(";
  out << "trip_id=" << to_string(obj.trip_id);
  out << ", " << "point=" << to_string(obj.point);
  out << ", " << "dollar_amount=" << to_string(obj.dollar_amount);
  out << ")";
  return out;
}


GeoRect::~GeoRect() throw() {
}


void GeoRect::__set_top_left(const Point& val) {
  this->top_left = val;
}

void GeoRect::__set_bottom_right(const Point& val) {
  this->bottom_right = val;
}

const char* GeoRect::ascii_fingerprint = "EF62258DC72F6B3B976C3D72A221C0AD";
const uint8_t GeoRect::binary_fingerprint[16] = {0xEF,0x62,0x25,0x8D,0xC7,0x2F,0x6B,0x3B,0x97,0x6C,0x3D,0x72,0xA2,0x21,0xC0,0xAD};

uint32_t GeoRect::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->top_left.read(iprot);
          this->__isset.top_left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bottom_right.read(iprot);
          this->__isset.bottom_right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeoRect::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GeoRect");

  xfer += oprot->writeFieldBegin("top_left", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->top_left.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottom_right", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->bottom_right.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GeoRect &a, GeoRect &b) {
  using ::std::swap;
  swap(a.top_left, b.top_left);
  swap(a.bottom_right, b.bottom_right);
  swap(a.__isset, b.__isset);
}

GeoRect::GeoRect(const GeoRect& other6) {
  top_left = other6.top_left;
  bottom_right = other6.bottom_right;
  __isset = other6.__isset;
}
GeoRect& GeoRect::operator=(const GeoRect& other7) {
  top_left = other7.top_left;
  bottom_right = other7.bottom_right;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GeoRect& obj) {
  using apache::thrift::to_string;
  out << "GeoRect(";
  out << "top_left=" << to_string(obj.top_left);
  out << ", " << "bottom_right=" << to_string(obj.bottom_right);
  out << ")";
  return out;
}


NumFare::~NumFare() throw() {
}


void NumFare::__set_num_trips(const int32_t val) {
  this->num_trips = val;
}

void NumFare::__set_dollar_fare(const double val) {
  this->dollar_fare = val;
}

const char* NumFare::ascii_fingerprint = "0B663F1913C9C6F43150B524A8B76386";
const uint8_t NumFare::binary_fingerprint[16] = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

uint32_t NumFare::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_trips);
          this->__isset.num_trips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dollar_fare);
          this->__isset.dollar_fare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NumFare::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NumFare");

  xfer += oprot->writeFieldBegin("num_trips", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_trips);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dollar_fare", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->dollar_fare);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NumFare &a, NumFare &b) {
  using ::std::swap;
  swap(a.num_trips, b.num_trips);
  swap(a.dollar_fare, b.dollar_fare);
  swap(a.__isset, b.__isset);
}

NumFare::NumFare(const NumFare& other8) {
  num_trips = other8.num_trips;
  dollar_fare = other8.dollar_fare;
  __isset = other8.__isset;
}
NumFare& NumFare::operator=(const NumFare& other9) {
  num_trips = other9.num_trips;
  dollar_fare = other9.dollar_fare;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NumFare& obj) {
  using apache::thrift::to_string;
  out << "NumFare(";
  out << "num_trips=" << to_string(obj.num_trips);
  out << ", " << "dollar_fare=" << to_string(obj.dollar_fare);
  out << ")";
  return out;
}


TimestampedNumTrips::~TimestampedNumTrips() throw() {
}


void TimestampedNumTrips::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void TimestampedNumTrips::__set_num_trips(const int32_t val) {
  this->num_trips = val;
}

const char* TimestampedNumTrips::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t TimestampedNumTrips::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t TimestampedNumTrips::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_trips);
          this->__isset.num_trips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimestampedNumTrips::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TimestampedNumTrips");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_trips", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_trips);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TimestampedNumTrips &a, TimestampedNumTrips &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.num_trips, b.num_trips);
  swap(a.__isset, b.__isset);
}

TimestampedNumTrips::TimestampedNumTrips(const TimestampedNumTrips& other10) {
  timestamp = other10.timestamp;
  num_trips = other10.num_trips;
  __isset = other10.__isset;
}
TimestampedNumTrips& TimestampedNumTrips::operator=(const TimestampedNumTrips& other11) {
  timestamp = other11.timestamp;
  num_trips = other11.num_trips;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TimestampedNumTrips& obj) {
  using apache::thrift::to_string;
  out << "TimestampedNumTrips(";
  out << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "num_trips=" << to_string(obj.num_trips);
  out << ")";
  return out;
}

} // namespace
