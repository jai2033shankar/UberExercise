/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef uber_TYPES_H
#define uber_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Uber {

class Point;

class TripPoint;

class TripPointAmount;

class GeoRect;

class NumFare;

class TimestampedNumTrips;

typedef struct _Point__isset {
  _Point__isset() : latitude(false), longitude(false) {}
  bool latitude :1;
  bool longitude :1;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : latitude(0), longitude(0) {
  }

  virtual ~Point() throw();
  double latitude;
  double longitude;

  _Point__isset __isset;

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  bool operator == (const Point & rhs) const
  {
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Point& obj);
};

void swap(Point &a, Point &b);

typedef struct _TripPoint__isset {
  _TripPoint__isset() : trip_id(false), point(false) {}
  bool trip_id :1;
  bool point :1;
} _TripPoint__isset;

class TripPoint {
 public:

  static const char* ascii_fingerprint; // = "E25EF828A39BA6FAA7D1E497A45B056E";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

  TripPoint(const TripPoint&);
  TripPoint& operator=(const TripPoint&);
  TripPoint() : trip_id(0) {
  }

  virtual ~TripPoint() throw();
  int32_t trip_id;
  Point point;

  _TripPoint__isset __isset;

  void __set_trip_id(const int32_t val);

  void __set_point(const Point& val);

  bool operator == (const TripPoint & rhs) const
  {
    if (!(trip_id == rhs.trip_id))
      return false;
    if (!(point == rhs.point))
      return false;
    return true;
  }
  bool operator != (const TripPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TripPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TripPoint& obj);
};

void swap(TripPoint &a, TripPoint &b);

typedef struct _TripPointAmount__isset {
  _TripPointAmount__isset() : trip_id(false), point(false), dollar_amount(false) {}
  bool trip_id :1;
  bool point :1;
  bool dollar_amount :1;
} _TripPointAmount__isset;

class TripPointAmount {
 public:

  static const char* ascii_fingerprint; // = "0D30CA2C0277E811115FBB5017B9FA7A";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x30,0xCA,0x2C,0x02,0x77,0xE8,0x11,0x11,0x5F,0xBB,0x50,0x17,0xB9,0xFA,0x7A};

  TripPointAmount(const TripPointAmount&);
  TripPointAmount& operator=(const TripPointAmount&);
  TripPointAmount() : trip_id(0), dollar_amount(0) {
  }

  virtual ~TripPointAmount() throw();
  int32_t trip_id;
  Point point;
  double dollar_amount;

  _TripPointAmount__isset __isset;

  void __set_trip_id(const int32_t val);

  void __set_point(const Point& val);

  void __set_dollar_amount(const double val);

  bool operator == (const TripPointAmount & rhs) const
  {
    if (!(trip_id == rhs.trip_id))
      return false;
    if (!(point == rhs.point))
      return false;
    if (!(dollar_amount == rhs.dollar_amount))
      return false;
    return true;
  }
  bool operator != (const TripPointAmount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TripPointAmount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TripPointAmount& obj);
};

void swap(TripPointAmount &a, TripPointAmount &b);

typedef struct _GeoRect__isset {
  _GeoRect__isset() : top_left(false), bottom_right(false) {}
  bool top_left :1;
  bool bottom_right :1;
} _GeoRect__isset;

class GeoRect {
 public:

  static const char* ascii_fingerprint; // = "EF62258DC72F6B3B976C3D72A221C0AD";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x62,0x25,0x8D,0xC7,0x2F,0x6B,0x3B,0x97,0x6C,0x3D,0x72,0xA2,0x21,0xC0,0xAD};

  GeoRect(const GeoRect&);
  GeoRect& operator=(const GeoRect&);
  GeoRect() {
  }

  virtual ~GeoRect() throw();
  Point top_left;
  Point bottom_right;

  _GeoRect__isset __isset;

  void __set_top_left(const Point& val);

  void __set_bottom_right(const Point& val);

  bool operator == (const GeoRect & rhs) const
  {
    if (!(top_left == rhs.top_left))
      return false;
    if (!(bottom_right == rhs.bottom_right))
      return false;
    return true;
  }
  bool operator != (const GeoRect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GeoRect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GeoRect& obj);
};

void swap(GeoRect &a, GeoRect &b);

typedef struct _NumFare__isset {
  _NumFare__isset() : num_trips(false), dollar_fare(false) {}
  bool num_trips :1;
  bool dollar_fare :1;
} _NumFare__isset;

class NumFare {
 public:

  static const char* ascii_fingerprint; // = "0B663F1913C9C6F43150B524A8B76386";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

  NumFare(const NumFare&);
  NumFare& operator=(const NumFare&);
  NumFare() : num_trips(0), dollar_fare(0) {
  }

  virtual ~NumFare() throw();
  int32_t num_trips;
  double dollar_fare;

  _NumFare__isset __isset;

  void __set_num_trips(const int32_t val);

  void __set_dollar_fare(const double val);

  bool operator == (const NumFare & rhs) const
  {
    if (!(num_trips == rhs.num_trips))
      return false;
    if (!(dollar_fare == rhs.dollar_fare))
      return false;
    return true;
  }
  bool operator != (const NumFare &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NumFare & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NumFare& obj);
};

void swap(NumFare &a, NumFare &b);

typedef struct _TimestampedNumTrips__isset {
  _TimestampedNumTrips__isset() : timestamp(false), num_trips(false) {}
  bool timestamp :1;
  bool num_trips :1;
} _TimestampedNumTrips__isset;

class TimestampedNumTrips {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  TimestampedNumTrips(const TimestampedNumTrips&);
  TimestampedNumTrips& operator=(const TimestampedNumTrips&);
  TimestampedNumTrips() : timestamp(0), num_trips(0) {
  }

  virtual ~TimestampedNumTrips() throw();
  int64_t timestamp;
  int32_t num_trips;

  _TimestampedNumTrips__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_num_trips(const int32_t val);

  bool operator == (const TimestampedNumTrips & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(num_trips == rhs.num_trips))
      return false;
    return true;
  }
  bool operator != (const TimestampedNumTrips &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimestampedNumTrips & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TimestampedNumTrips& obj);
};

void swap(TimestampedNumTrips &a, TimestampedNumTrips &b);

} // namespace

#endif
