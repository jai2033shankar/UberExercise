// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Uber.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Uber;

class UberHandler : virtual public UberIf {
 public:
  UberHandler() {
    // Your initialization goes here
  }

  void BeginTrip(const TripPoint& trip_point) {
    // Your implementation goes here
    printf("BeginTrip\n");
  }

  void UpdateTrip(const TripPoint& trip_point) {
    // Your implementation goes here
    printf("UpdateTrip\n");
  }

  void EndTrip(const TripPointAmount& trip_point_amount) {
    // Your implementation goes here
    printf("EndTrip\n");
  }

  int32_t NumTripsPassed(const GeoRect& rectangle) {
    // Your implementation goes here
    printf("NumTripsPassed\n");
  }

  void NumTripsStartedOrStoppedAndFare(NumFare& _return, const GeoRect& rectangle) {
    // Your implementation goes here
    printf("NumTripsStartedOrStoppedAndFare\n");
  }

  int32_t NumOccurringTrips(const int64_t timestamp) {
    // Your implementation goes here
    printf("NumOccurringTrips\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<UberHandler> handler(new UberHandler());
  shared_ptr<TProcessor> processor(new UberProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

