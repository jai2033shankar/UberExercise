/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Uber_H
#define Uber_H

#include <thrift/TDispatchProcessor.h>
#include "uber_types.h"

namespace Uber {

class UberIf {
 public:
  virtual ~UberIf() {}
  virtual void BeginTrip(const TripPoint& trip_point) = 0;
  virtual void UpdateTrip(const TripPoint& trip_point) = 0;
  virtual void EndTrip(const TripPointAmount& trip_point_amount) = 0;
  virtual int32_t NumTripsPassed(const GeoRect& rectangle) = 0;
  virtual void NumTripsStartedOrStoppedAndFare(NumFare& _return, const GeoRect& rectangle) = 0;
  virtual int32_t NumOccurringTrips(const int64_t timestamp) = 0;
};

class UberIfFactory {
 public:
  typedef UberIf Handler;

  virtual ~UberIfFactory() {}

  virtual UberIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UberIf* /* handler */) = 0;
};

class UberIfSingletonFactory : virtual public UberIfFactory {
 public:
  UberIfSingletonFactory(const boost::shared_ptr<UberIf>& iface) : iface_(iface) {}
  virtual ~UberIfSingletonFactory() {}

  virtual UberIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UberIf* /* handler */) {}

 protected:
  boost::shared_ptr<UberIf> iface_;
};

class UberNull : virtual public UberIf {
 public:
  virtual ~UberNull() {}
  void BeginTrip(const TripPoint& /* trip_point */) {
    return;
  }
  void UpdateTrip(const TripPoint& /* trip_point */) {
    return;
  }
  void EndTrip(const TripPointAmount& /* trip_point_amount */) {
    return;
  }
  int32_t NumTripsPassed(const GeoRect& /* rectangle */) {
    int32_t _return = 0;
    return _return;
  }
  void NumTripsStartedOrStoppedAndFare(NumFare& /* _return */, const GeoRect& /* rectangle */) {
    return;
  }
  int32_t NumOccurringTrips(const int64_t /* timestamp */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Uber_BeginTrip_args__isset {
  _Uber_BeginTrip_args__isset() : trip_point(false) {}
  bool trip_point :1;
} _Uber_BeginTrip_args__isset;

class Uber_BeginTrip_args {
 public:

  static const char* ascii_fingerprint; // = "557F13285B697BB105E9B598E6A1048E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x7F,0x13,0x28,0x5B,0x69,0x7B,0xB1,0x05,0xE9,0xB5,0x98,0xE6,0xA1,0x04,0x8E};

  Uber_BeginTrip_args(const Uber_BeginTrip_args&);
  Uber_BeginTrip_args& operator=(const Uber_BeginTrip_args&);
  Uber_BeginTrip_args() {
  }

  virtual ~Uber_BeginTrip_args() throw();
  TripPoint trip_point;

  _Uber_BeginTrip_args__isset __isset;

  void __set_trip_point(const TripPoint& val);

  bool operator == (const Uber_BeginTrip_args & rhs) const
  {
    if (!(trip_point == rhs.trip_point))
      return false;
    return true;
  }
  bool operator != (const Uber_BeginTrip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_BeginTrip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_BeginTrip_args& obj);
};


class Uber_BeginTrip_pargs {
 public:

  static const char* ascii_fingerprint; // = "557F13285B697BB105E9B598E6A1048E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x7F,0x13,0x28,0x5B,0x69,0x7B,0xB1,0x05,0xE9,0xB5,0x98,0xE6,0xA1,0x04,0x8E};


  virtual ~Uber_BeginTrip_pargs() throw();
  const TripPoint* trip_point;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_BeginTrip_pargs& obj);
};


class Uber_BeginTrip_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Uber_BeginTrip_result(const Uber_BeginTrip_result&);
  Uber_BeginTrip_result& operator=(const Uber_BeginTrip_result&);
  Uber_BeginTrip_result() {
  }

  virtual ~Uber_BeginTrip_result() throw();

  bool operator == (const Uber_BeginTrip_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Uber_BeginTrip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_BeginTrip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_BeginTrip_result& obj);
};


class Uber_BeginTrip_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Uber_BeginTrip_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_BeginTrip_presult& obj);
};

typedef struct _Uber_UpdateTrip_args__isset {
  _Uber_UpdateTrip_args__isset() : trip_point(false) {}
  bool trip_point :1;
} _Uber_UpdateTrip_args__isset;

class Uber_UpdateTrip_args {
 public:

  static const char* ascii_fingerprint; // = "557F13285B697BB105E9B598E6A1048E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x7F,0x13,0x28,0x5B,0x69,0x7B,0xB1,0x05,0xE9,0xB5,0x98,0xE6,0xA1,0x04,0x8E};

  Uber_UpdateTrip_args(const Uber_UpdateTrip_args&);
  Uber_UpdateTrip_args& operator=(const Uber_UpdateTrip_args&);
  Uber_UpdateTrip_args() {
  }

  virtual ~Uber_UpdateTrip_args() throw();
  TripPoint trip_point;

  _Uber_UpdateTrip_args__isset __isset;

  void __set_trip_point(const TripPoint& val);

  bool operator == (const Uber_UpdateTrip_args & rhs) const
  {
    if (!(trip_point == rhs.trip_point))
      return false;
    return true;
  }
  bool operator != (const Uber_UpdateTrip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_UpdateTrip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_UpdateTrip_args& obj);
};


class Uber_UpdateTrip_pargs {
 public:

  static const char* ascii_fingerprint; // = "557F13285B697BB105E9B598E6A1048E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x7F,0x13,0x28,0x5B,0x69,0x7B,0xB1,0x05,0xE9,0xB5,0x98,0xE6,0xA1,0x04,0x8E};


  virtual ~Uber_UpdateTrip_pargs() throw();
  const TripPoint* trip_point;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_UpdateTrip_pargs& obj);
};


class Uber_UpdateTrip_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Uber_UpdateTrip_result(const Uber_UpdateTrip_result&);
  Uber_UpdateTrip_result& operator=(const Uber_UpdateTrip_result&);
  Uber_UpdateTrip_result() {
  }

  virtual ~Uber_UpdateTrip_result() throw();

  bool operator == (const Uber_UpdateTrip_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Uber_UpdateTrip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_UpdateTrip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_UpdateTrip_result& obj);
};


class Uber_UpdateTrip_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Uber_UpdateTrip_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_UpdateTrip_presult& obj);
};

typedef struct _Uber_EndTrip_args__isset {
  _Uber_EndTrip_args__isset() : trip_point_amount(false) {}
  bool trip_point_amount :1;
} _Uber_EndTrip_args__isset;

class Uber_EndTrip_args {
 public:

  static const char* ascii_fingerprint; // = "023AF55D9E847893DA1A8EC15D207D99";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x3A,0xF5,0x5D,0x9E,0x84,0x78,0x93,0xDA,0x1A,0x8E,0xC1,0x5D,0x20,0x7D,0x99};

  Uber_EndTrip_args(const Uber_EndTrip_args&);
  Uber_EndTrip_args& operator=(const Uber_EndTrip_args&);
  Uber_EndTrip_args() {
  }

  virtual ~Uber_EndTrip_args() throw();
  TripPointAmount trip_point_amount;

  _Uber_EndTrip_args__isset __isset;

  void __set_trip_point_amount(const TripPointAmount& val);

  bool operator == (const Uber_EndTrip_args & rhs) const
  {
    if (!(trip_point_amount == rhs.trip_point_amount))
      return false;
    return true;
  }
  bool operator != (const Uber_EndTrip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_EndTrip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_EndTrip_args& obj);
};


class Uber_EndTrip_pargs {
 public:

  static const char* ascii_fingerprint; // = "023AF55D9E847893DA1A8EC15D207D99";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x3A,0xF5,0x5D,0x9E,0x84,0x78,0x93,0xDA,0x1A,0x8E,0xC1,0x5D,0x20,0x7D,0x99};


  virtual ~Uber_EndTrip_pargs() throw();
  const TripPointAmount* trip_point_amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_EndTrip_pargs& obj);
};


class Uber_EndTrip_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Uber_EndTrip_result(const Uber_EndTrip_result&);
  Uber_EndTrip_result& operator=(const Uber_EndTrip_result&);
  Uber_EndTrip_result() {
  }

  virtual ~Uber_EndTrip_result() throw();

  bool operator == (const Uber_EndTrip_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Uber_EndTrip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_EndTrip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_EndTrip_result& obj);
};


class Uber_EndTrip_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Uber_EndTrip_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_EndTrip_presult& obj);
};

typedef struct _Uber_NumTripsPassed_args__isset {
  _Uber_NumTripsPassed_args__isset() : rectangle(false) {}
  bool rectangle :1;
} _Uber_NumTripsPassed_args__isset;

class Uber_NumTripsPassed_args {
 public:

  static const char* ascii_fingerprint; // = "B098838E94EC938231ADDC72B5241938";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x98,0x83,0x8E,0x94,0xEC,0x93,0x82,0x31,0xAD,0xDC,0x72,0xB5,0x24,0x19,0x38};

  Uber_NumTripsPassed_args(const Uber_NumTripsPassed_args&);
  Uber_NumTripsPassed_args& operator=(const Uber_NumTripsPassed_args&);
  Uber_NumTripsPassed_args() {
  }

  virtual ~Uber_NumTripsPassed_args() throw();
  GeoRect rectangle;

  _Uber_NumTripsPassed_args__isset __isset;

  void __set_rectangle(const GeoRect& val);

  bool operator == (const Uber_NumTripsPassed_args & rhs) const
  {
    if (!(rectangle == rhs.rectangle))
      return false;
    return true;
  }
  bool operator != (const Uber_NumTripsPassed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumTripsPassed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsPassed_args& obj);
};


class Uber_NumTripsPassed_pargs {
 public:

  static const char* ascii_fingerprint; // = "B098838E94EC938231ADDC72B5241938";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x98,0x83,0x8E,0x94,0xEC,0x93,0x82,0x31,0xAD,0xDC,0x72,0xB5,0x24,0x19,0x38};


  virtual ~Uber_NumTripsPassed_pargs() throw();
  const GeoRect* rectangle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsPassed_pargs& obj);
};

typedef struct _Uber_NumTripsPassed_result__isset {
  _Uber_NumTripsPassed_result__isset() : success(false) {}
  bool success :1;
} _Uber_NumTripsPassed_result__isset;

class Uber_NumTripsPassed_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Uber_NumTripsPassed_result(const Uber_NumTripsPassed_result&);
  Uber_NumTripsPassed_result& operator=(const Uber_NumTripsPassed_result&);
  Uber_NumTripsPassed_result() : success(0) {
  }

  virtual ~Uber_NumTripsPassed_result() throw();
  int32_t success;

  _Uber_NumTripsPassed_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Uber_NumTripsPassed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Uber_NumTripsPassed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumTripsPassed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsPassed_result& obj);
};

typedef struct _Uber_NumTripsPassed_presult__isset {
  _Uber_NumTripsPassed_presult__isset() : success(false) {}
  bool success :1;
} _Uber_NumTripsPassed_presult__isset;

class Uber_NumTripsPassed_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Uber_NumTripsPassed_presult() throw();
  int32_t* success;

  _Uber_NumTripsPassed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsPassed_presult& obj);
};

typedef struct _Uber_NumTripsStartedOrStoppedAndFare_args__isset {
  _Uber_NumTripsStartedOrStoppedAndFare_args__isset() : rectangle(false) {}
  bool rectangle :1;
} _Uber_NumTripsStartedOrStoppedAndFare_args__isset;

class Uber_NumTripsStartedOrStoppedAndFare_args {
 public:

  static const char* ascii_fingerprint; // = "B098838E94EC938231ADDC72B5241938";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x98,0x83,0x8E,0x94,0xEC,0x93,0x82,0x31,0xAD,0xDC,0x72,0xB5,0x24,0x19,0x38};

  Uber_NumTripsStartedOrStoppedAndFare_args(const Uber_NumTripsStartedOrStoppedAndFare_args&);
  Uber_NumTripsStartedOrStoppedAndFare_args& operator=(const Uber_NumTripsStartedOrStoppedAndFare_args&);
  Uber_NumTripsStartedOrStoppedAndFare_args() {
  }

  virtual ~Uber_NumTripsStartedOrStoppedAndFare_args() throw();
  GeoRect rectangle;

  _Uber_NumTripsStartedOrStoppedAndFare_args__isset __isset;

  void __set_rectangle(const GeoRect& val);

  bool operator == (const Uber_NumTripsStartedOrStoppedAndFare_args & rhs) const
  {
    if (!(rectangle == rhs.rectangle))
      return false;
    return true;
  }
  bool operator != (const Uber_NumTripsStartedOrStoppedAndFare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumTripsStartedOrStoppedAndFare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsStartedOrStoppedAndFare_args& obj);
};


class Uber_NumTripsStartedOrStoppedAndFare_pargs {
 public:

  static const char* ascii_fingerprint; // = "B098838E94EC938231ADDC72B5241938";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x98,0x83,0x8E,0x94,0xEC,0x93,0x82,0x31,0xAD,0xDC,0x72,0xB5,0x24,0x19,0x38};


  virtual ~Uber_NumTripsStartedOrStoppedAndFare_pargs() throw();
  const GeoRect* rectangle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsStartedOrStoppedAndFare_pargs& obj);
};

typedef struct _Uber_NumTripsStartedOrStoppedAndFare_result__isset {
  _Uber_NumTripsStartedOrStoppedAndFare_result__isset() : success(false) {}
  bool success :1;
} _Uber_NumTripsStartedOrStoppedAndFare_result__isset;

class Uber_NumTripsStartedOrStoppedAndFare_result {
 public:

  static const char* ascii_fingerprint; // = "A35BAF838660023910437AAC6BD206C7";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0x5B,0xAF,0x83,0x86,0x60,0x02,0x39,0x10,0x43,0x7A,0xAC,0x6B,0xD2,0x06,0xC7};

  Uber_NumTripsStartedOrStoppedAndFare_result(const Uber_NumTripsStartedOrStoppedAndFare_result&);
  Uber_NumTripsStartedOrStoppedAndFare_result& operator=(const Uber_NumTripsStartedOrStoppedAndFare_result&);
  Uber_NumTripsStartedOrStoppedAndFare_result() {
  }

  virtual ~Uber_NumTripsStartedOrStoppedAndFare_result() throw();
  NumFare success;

  _Uber_NumTripsStartedOrStoppedAndFare_result__isset __isset;

  void __set_success(const NumFare& val);

  bool operator == (const Uber_NumTripsStartedOrStoppedAndFare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Uber_NumTripsStartedOrStoppedAndFare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumTripsStartedOrStoppedAndFare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsStartedOrStoppedAndFare_result& obj);
};

typedef struct _Uber_NumTripsStartedOrStoppedAndFare_presult__isset {
  _Uber_NumTripsStartedOrStoppedAndFare_presult__isset() : success(false) {}
  bool success :1;
} _Uber_NumTripsStartedOrStoppedAndFare_presult__isset;

class Uber_NumTripsStartedOrStoppedAndFare_presult {
 public:

  static const char* ascii_fingerprint; // = "A35BAF838660023910437AAC6BD206C7";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0x5B,0xAF,0x83,0x86,0x60,0x02,0x39,0x10,0x43,0x7A,0xAC,0x6B,0xD2,0x06,0xC7};


  virtual ~Uber_NumTripsStartedOrStoppedAndFare_presult() throw();
  NumFare* success;

  _Uber_NumTripsStartedOrStoppedAndFare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumTripsStartedOrStoppedAndFare_presult& obj);
};

typedef struct _Uber_NumOccurringTrips_args__isset {
  _Uber_NumOccurringTrips_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _Uber_NumOccurringTrips_args__isset;

class Uber_NumOccurringTrips_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Uber_NumOccurringTrips_args(const Uber_NumOccurringTrips_args&);
  Uber_NumOccurringTrips_args& operator=(const Uber_NumOccurringTrips_args&);
  Uber_NumOccurringTrips_args() : timestamp(0) {
  }

  virtual ~Uber_NumOccurringTrips_args() throw();
  int64_t timestamp;

  _Uber_NumOccurringTrips_args__isset __isset;

  void __set_timestamp(const int64_t val);

  bool operator == (const Uber_NumOccurringTrips_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const Uber_NumOccurringTrips_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumOccurringTrips_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumOccurringTrips_args& obj);
};


class Uber_NumOccurringTrips_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~Uber_NumOccurringTrips_pargs() throw();
  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumOccurringTrips_pargs& obj);
};

typedef struct _Uber_NumOccurringTrips_result__isset {
  _Uber_NumOccurringTrips_result__isset() : success(false) {}
  bool success :1;
} _Uber_NumOccurringTrips_result__isset;

class Uber_NumOccurringTrips_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Uber_NumOccurringTrips_result(const Uber_NumOccurringTrips_result&);
  Uber_NumOccurringTrips_result& operator=(const Uber_NumOccurringTrips_result&);
  Uber_NumOccurringTrips_result() : success(0) {
  }

  virtual ~Uber_NumOccurringTrips_result() throw();
  int32_t success;

  _Uber_NumOccurringTrips_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Uber_NumOccurringTrips_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Uber_NumOccurringTrips_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uber_NumOccurringTrips_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumOccurringTrips_result& obj);
};

typedef struct _Uber_NumOccurringTrips_presult__isset {
  _Uber_NumOccurringTrips_presult__isset() : success(false) {}
  bool success :1;
} _Uber_NumOccurringTrips_presult__isset;

class Uber_NumOccurringTrips_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Uber_NumOccurringTrips_presult() throw();
  int32_t* success;

  _Uber_NumOccurringTrips_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Uber_NumOccurringTrips_presult& obj);
};

class UberClient : virtual public UberIf {
 public:
  UberClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UberClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void BeginTrip(const TripPoint& trip_point);
  void send_BeginTrip(const TripPoint& trip_point);
  void recv_BeginTrip();
  void UpdateTrip(const TripPoint& trip_point);
  void send_UpdateTrip(const TripPoint& trip_point);
  void recv_UpdateTrip();
  void EndTrip(const TripPointAmount& trip_point_amount);
  void send_EndTrip(const TripPointAmount& trip_point_amount);
  void recv_EndTrip();
  int32_t NumTripsPassed(const GeoRect& rectangle);
  void send_NumTripsPassed(const GeoRect& rectangle);
  int32_t recv_NumTripsPassed();
  void NumTripsStartedOrStoppedAndFare(NumFare& _return, const GeoRect& rectangle);
  void send_NumTripsStartedOrStoppedAndFare(const GeoRect& rectangle);
  void recv_NumTripsStartedOrStoppedAndFare(NumFare& _return);
  int32_t NumOccurringTrips(const int64_t timestamp);
  void send_NumOccurringTrips(const int64_t timestamp);
  int32_t recv_NumOccurringTrips();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UberProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UberIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UberProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_BeginTrip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTrip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndTrip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NumTripsPassed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NumTripsStartedOrStoppedAndFare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NumOccurringTrips(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UberProcessor(boost::shared_ptr<UberIf> iface) :
    iface_(iface) {
    processMap_["BeginTrip"] = &UberProcessor::process_BeginTrip;
    processMap_["UpdateTrip"] = &UberProcessor::process_UpdateTrip;
    processMap_["EndTrip"] = &UberProcessor::process_EndTrip;
    processMap_["NumTripsPassed"] = &UberProcessor::process_NumTripsPassed;
    processMap_["NumTripsStartedOrStoppedAndFare"] = &UberProcessor::process_NumTripsStartedOrStoppedAndFare;
    processMap_["NumOccurringTrips"] = &UberProcessor::process_NumOccurringTrips;
  }

  virtual ~UberProcessor() {}
};

class UberProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UberProcessorFactory(const ::boost::shared_ptr< UberIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UberIfFactory > handlerFactory_;
};

class UberMultiface : virtual public UberIf {
 public:
  UberMultiface(std::vector<boost::shared_ptr<UberIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UberMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UberIf> > ifaces_;
  UberMultiface() {}
  void add(boost::shared_ptr<UberIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void BeginTrip(const TripPoint& trip_point) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BeginTrip(trip_point);
    }
    ifaces_[i]->BeginTrip(trip_point);
  }

  void UpdateTrip(const TripPoint& trip_point) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTrip(trip_point);
    }
    ifaces_[i]->UpdateTrip(trip_point);
  }

  void EndTrip(const TripPointAmount& trip_point_amount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndTrip(trip_point_amount);
    }
    ifaces_[i]->EndTrip(trip_point_amount);
  }

  int32_t NumTripsPassed(const GeoRect& rectangle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NumTripsPassed(rectangle);
    }
    return ifaces_[i]->NumTripsPassed(rectangle);
  }

  void NumTripsStartedOrStoppedAndFare(NumFare& _return, const GeoRect& rectangle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NumTripsStartedOrStoppedAndFare(_return, rectangle);
    }
    ifaces_[i]->NumTripsStartedOrStoppedAndFare(_return, rectangle);
    return;
  }

  int32_t NumOccurringTrips(const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NumOccurringTrips(timestamp);
    }
    return ifaces_[i]->NumOccurringTrips(timestamp);
  }

};

} // namespace

#endif
